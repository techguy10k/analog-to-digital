C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MT8880
OBJECT MODULE PLACED IN .\Output\mt8880.obj
COMPILER INVOKED BY: C:\keil_v5\C51\BIN\C51.EXE lib.c\mt8880.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\lib.h;.\user\h) DEFINE(
                    -USE_UART1_AS_COMMAND_CONSOLE) DEBUG OBJECTEXTEND PRINT(.\Listings\mt8880.lst) TABS(2) OBJECT(.\Output\mt8880.obj)

line level    source

   1          #include"mt8880.h"
   2          #include"STC15.h"
   3          #include"INTRINS.h"
   4          #include"delay.h"
   5          #include"uart.h"
   6          #include"user_timer.h"
   7          #include"stdlib.h"
   8          #include"command.h"
   9          #include"exint.h"
  10          #include"io.h"
  11          #include"pro.h"
  12          
  13          #include"string.h"
  14          
  15          extern bit mt8880_recflag;
  16          extern unsigned char mt8880_rec_raw, mt8880_rec;
  17          extern xdata unsigned int mt8880_counter;
  18          extern systemstatus_typedef* systemstatus;
  19          
  20          
  21          unsigned char decode_table(unsigned char input);
  22          unsigned char encode_table(unsigned char input);
  23          
  24          void mt8880_write_transmit_data(unsigned char data_input)
  25          {
  26   1        clk = 0;
  27   1      
  28   1        data_input = data_input << 4;
  29   1        P2 = 0x0f;
  30   1        rs0 = 0;
  31   1        rw = 0;
  32   1      
  33   1      
  34   1        P2 |= data_input;
  35   1        delay1us();
  36   1        cs = 0;
  37   1        clk = 1;
  38   1        delay1us();
  39   1        clk = 0;
  40   1        delay1us();
  41   1        cs = 1;
  42   1      }
  43          
  44          mt8880_status_typedef mt8880_get_status(bit clk_enable)
  45          {
  46   1        unsigned char data_read;
  47   1        mt8880_status_typedef mt8880_status;
  48   1      
  49   1        timer4_cmd(reset_bit);
  50   1      
  51   1        clk = 0;
  52   1      
  53   1        P2 = 0Xff;
  54   1        rs0 = 1;
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 2   

  55   1        rw = 1;
  56   1      
  57   1      
  58   1        cs = 0;
  59   1        clk = 1;
  60   1        delay1us();
  61   1        data_read = P2;
  62   1        clk = 0;
  63   1        delay1us();
  64   1        cs = 1;
  65   1      
  66   1        data_read = data_read >> 4;
  67   1      
  68   1        if(data_read & 0x01)
  69   1          mt8880_status.mt8880_irq = 1;
  70   1        if(data_read & 0x02)
  71   1          mt8880_status.mt8880_trans_data_empty = 1;
  72   1        if(data_read & 0x04)
  73   1          mt8880_status.mt8880_rec_data_full = 1;
  74   1        if(data_read & 0x08)
  75   1          mt8880_status.mt8880_delayed_steering = 1;
  76   1      
  77   1        if(clk_enable == 1)
  78   1          timer4_cmd(set_bit);
  79   1      
  80   1        return mt8880_status;
  81   1      }
  82          
  83          unsigned char mt8880_read_receive_data(void)
  84          {
  85   1        unsigned char data_read;
  86   1      
  87   1        timer4_cmd(set_bit);
  88   1      
  89   1        clk = 0;
  90   1      
  91   1        P2 = 0Xff;
  92   1        rs0 = 0;
  93   1        rw = 1;
  94   1      
  95   1        cs = 0;
  96   1        clk = 1;
  97   1        delay1us();
  98   1        data_read = P2;
  99   1        clk = 0;
 100   1        delay1us();
 101   1        cs = 1;
 102   1      
 103   1        data_read = data_read >> 4;
 104   1      
 105   1        timer4_cmd(set_bit);
 106   1      
 107   1        return data_read;
 108   1      }
 109          
 110          void mt8880_write_control_data(mt8880_control_typedef* mt8880_control)
 111          {
 112   1        unsigned char data_write_cra = 0x00;
 113   1        unsigned char data_write_crb = 0x00;
 114   1      
 115   1        if(mt8880_control->tone_output)
 116   1          data_write_cra |= 0x01;
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 3   

 117   1        if(mt8880_control->mode_control)
 118   1          data_write_cra |= 0x02;
 119   1        if(mt8880_control->interrupt_enable)
 120   1          data_write_cra |= 0x04;
 121   1        if(mt8880_control->register_b_selected)
 122   1          data_write_cra |= 0x08;
 123   1      
 124   1        if(mt8880_control->burst_mode)
 125   1          data_write_crb |= 0x01;
 126   1        if(mt8880_control->test_mode)
 127   1          data_write_crb |= 0x02;
 128   1        if(mt8880_control->single_dual_tone_generation)
 129   1          data_write_crb |= 0x04;
 130   1        if(mt8880_control->column_row_tones)
 131   1          data_write_crb |= 0x08;
 132   1      
 133   1        data_write_cra = data_write_cra << 4;
 134   1        data_write_crb = data_write_crb << 4;
 135   1      
 136   1        clk = 0;
 137   1      
 138   1      
 139   1        P2 = 0x0f;
 140   1        rs0 = 1;
 141   1        rw = 0;
 142   1      
 143   1        P2 |= data_write_cra;
 144   1        cs = 0;
 145   1        clk = 1;
 146   1        delay1us();
 147   1        clk = 0;
 148   1        delay1us();
 149   1        cs = 1;
 150   1      
 151   1        if(mt8880_control->register_b_selected == 0)
 152   1          {
 153   2            return;
 154   2          }
 155   1      
 156   1        P2 = 0x0f;
 157   1        rs0 = 1;
 158   1        rw = 0;
 159   1      
 160   1        P2 |= data_write_crb;
 161   1        cs = 0;
 162   1        clk = 1;
 163   1        delay1us();
 164   1        clk = 0;
 165   1        delay1us();
 166   1        cs = 1;
 167   1      
 168   1      }
 169          
 170          
 171          void mt8880_bootup_setup(void)
 172          {
 173   1        mt8880_control_typedef* mt8880_control = NULL;
 174   1        mt8880_control = malloc(sizeof(mt8880_control_typedef));
 175   1        memset(mt8880_control,0,sizeof(mt8880_control_typedef));
 176   1      
 177   1        mt8880_control->tone_output = reset_bit;
 178   1        mt8880_control->mode_control = reset_bit;
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 4   

 179   1        mt8880_control->interrupt_enable = reset_bit;
 180   1        mt8880_control->register_b_selected = reset_bit;
 181   1        mt8880_control->burst_mode = reset_bit;
 182   1        mt8880_control->test_mode = reset_bit;
 183   1        mt8880_control->single_dual_tone_generation = reset_bit;
 184   1        mt8880_control->column_row_tones = reset_bit;
 185   1      
 186   1      
 187   1        mt8880_get_status(reset_bit);
 188   1        mt8880_write_control_data(mt8880_control);
 189   1        mt8880_write_control_data(mt8880_control);
 190   1        mt8880_control->register_b_selected = set_bit;
 191   1        mt8880_write_control_data(mt8880_control);
 192   1        mt8880_control->register_b_selected = reset_bit;
 193   1        mt8880_write_control_data(mt8880_control);
 194   1        mt8880_get_status(reset_bit);
 195   1      
 196   1        free(mt8880_control);
 197   1      
 198   1      }
 199          
 200          
 201          /*
 202            先发低四位 再发高四位
 203          */
 204          void mt8880_send_one_byte(unsigned char data_input)
 205          {
 206   1        mt8880_control_typedef*  mt8880_control;
 207   1      
 208   1        mt8880_control = malloc(sizeof(mt8880_control_typedef));
 209   1      
 210   1        if(mt8880_control == NULL)
 211   1          {
 212   2            send_string_to_console("ERROR CODE 2011!\nSystem halt.\n");
 213   2            while(1);
 214   2          }
 215   1      
 216   1      
 217   1        mt8880_control->tone_output = reset_bit;
 218   1        mt8880_control->mode_control = mt8880_mode_dtmf;
 219   1        mt8880_control->interrupt_enable = reset_bit; //disable interrupts when its sending data
 220   1        mt8880_control->register_b_selected = set_bit;
 221   1        mt8880_control->burst_mode = mt8880_burst_mode_disable;
 222   1        mt8880_control->single_dual_tone_generation = mt8880_single_dual_tone_generation_dual;
 223   1        mt8880_control->test_mode = reset_bit;
 224   1        mt8880_control->column_row_tones = reset_bit;
 225   1      
 226   1        exint2_cmd(reset_bit);
 227   1        timer4_cmd(reset_bit);
 228   1        clk = 0;
 229   1      
 230   1        mt8880_bootup_setup();
 231   1        mt8880_write_control_data(mt8880_control);
 232   1      
 233   1        mt8880_write_transmit_data(data_input);
 234   1      
 235   1        mt8880_control->tone_output = set_bit;
 236   1        mt8880_write_control_data(mt8880_control);
 237   1      
 238   1      
 239   1        mt8880_counter = 0;
 240   1        while((mt8880_counter < mt8880_send_high_time) && (1));
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 5   

 241   1      
 242   1        mt8880_control->tone_output = reset_bit;
 243   1        mt8880_write_control_data(mt8880_control);
 244   1      
 245   1        mt8880_counter = 0;
 246   1        while((mt8880_counter < mt8880_send_low_time) && (1));
 247   1        \
 248   1        mt8880_get_status(reset_bit);
 249   1      
 250   1        data_input >>= 4;
 251   1      
 252   1        mt8880_control->tone_output = set_bit;
 253   1        mt8880_write_control_data(mt8880_control);
 254   1        mt8880_write_transmit_data(data_input);
 255   1      
 256   1        mt8880_counter = 0;
 257   1        while((mt8880_counter < mt8880_send_high_time) && (1));
 258   1      
 259   1        mt8880_control->tone_output = reset_bit;
 260   1        mt8880_write_control_data(mt8880_control);
 261   1      
 262   1        mt8880_counter = 0;
 263   1        while((mt8880_counter < mt8880_send_low_time) && (1));
 264   1      
 265   1        mt8880_get_status(reset_bit);
 266   1      
 267   1        free(mt8880_control);
 268   1      
 269   1      }
 270          
 271          void mt8880_listen(void)
 272          {
 273   1        xdata mt8880_control_typedef*  mt8880_control;
 274   1      
 275   1        mt8880_control = malloc(sizeof(mt8880_control_typedef));
 276   1      
 277   1        if(mt8880_control == NULL)
 278   1          {
 279   2            send_string_to_console("ERROR CODE 2012!\nSystem halt.\n");
 280   2            while(1);
 281   2          }
 282   1      
 283   1        mt8880_control->tone_output = reset_bit;
 284   1        mt8880_control->mode_control = mt8880_mode_dtmf;
 285   1        mt8880_control->interrupt_enable = set_bit;
 286   1        mt8880_control->register_b_selected = set_bit;
 287   1        mt8880_control->burst_mode = mt8880_burst_mode_disable;
 288   1        mt8880_control->single_dual_tone_generation = mt8880_single_dual_tone_generation_dual;
 289   1        mt8880_control->test_mode = reset_bit;
 290   1        mt8880_control->column_row_tones = reset_bit;
 291   1        mt8880_bootup_setup();
 292   1        mt8880_write_control_data(mt8880_control);
 293   1      
 294   1        free(mt8880_control);
 295   1        timer4_cmd(set_bit);
 296   1        exint2_cmd(set_bit);
 297   1      }
 298          
 299          void mt8880_receive(void)
 300          {
 301   1        unsigned char rec = 0;
 302   1        unsigned char temp = 10;
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 6   

 303   1        unsigned char i = 0;
 304   1      
 305   1        if(mt8880_recflag != 0)
 306   1          {
 307   2            mt8880_counter = 0x00;
 308   2      
 309   2            LED_RX = 0;
 310   2      
 311   2            while(mt8880_counter < 25);
 312   2            rec = mt8880_read_receive_data();
 313   2      
 314   2            while(mt8880_counter < 125);
 315   2            temp = mt8880_read_receive_data();
 316   2      
 317   2            while(mt8880_counter < 220);
 318   2      
 319   2            temp = temp << 4;
 320   2      
 321   2            rec |= temp;
 322   2      
 323   2            send_byte_to_console(rec);
 324   2      
 325   2            mt8880_recflag = 0;
 326   2            LED_RX = 1;
 327   2            systemstatus->system_state = system_state_listen;
 328   2          }
 329   1      }
 330          
 331          void mt8880_transmit_start(void)
 332          {
 333   1        systemstatus->system_state = system_state_transmit;
 334   1        mt8880_counter = 0;
 335   1        mt8880_ptt_cmd(set_bit);
 336   1        while((mt8880_counter < mt8880_start_delay_time) && (1));
 337   1      }
 338          
 339          void mt8880_transmit_stop(void)
 340          {
 341   1        mt8880_counter = 0;
 342   1        while((mt8880_counter < mt8880_stop_delay_time) && (1));
 343   1        mt8880_ptt_cmd(reset_bit);
 344   1        mt8880_listen();
 345   1        systemstatus->system_state = system_state_listen;
 346   1      }
 347          
 348          
 349          
 350          void mt8880_send_string(unsigned char* string)
 351          {
 352   1      //  hc05_cmd(reset_bit);
 353   1        mt8880_transmit_start();
 354   1      
 355   1        while(*string)
 356   1          {
 357   2            mt8880_send_one_byte(*string);
 358   2            string ++;
 359   2            delayms(100);
 360   2          }
 361   1      
 362   1        mt8880_transmit_stop();
 363   1        hc05_cmd(set_bit);
 364   1      }
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 7   

 365          
 366          void mt8880_send_sequence_byte(unsigned char* input,unsigned int lenth)
 367          {
 368   1        unsigned int i;
 369   1      
 370   1        mt8880_transmit_start();
 371   1        for(i = 0; i < lenth; i ++)
 372   1          {
 373   2            mt8880_send_one_byte(input[i]);
 374   2          }
 375   1        mt8880_transmit_stop();
 376   1      }
 377          
 378          unsigned char get_mode(unsigned char* input)
 379          {
 380   1        xdata unsigned char number;
 381   1        xdata unsigned char row;
 382   1        xdata unsigned char more1;
 383   1        xdata unsigned char* same_count = NULL;
 384   1      
 385   1        same_count = calloc(5, sizeof(unsigned char));
 386   1      
 387   1        for(row = 0; row < 5; row ++)
 388   1          {
 389   2            for(number = 0; number < 5; number ++)
 390   2              {
 391   3                if(input[row] == input[number])
 392   3                  {
 393   4                    same_count[row] ++;
 394   4                  }
 395   3              }
 396   2          }
 397   1      
 398   1        if(same_count[0] > same_count[1])
 399   1          {
 400   2            more1 = 0;
 401   2          }
 402   1        else
 403   1          {
 404   2            more1 = 1;
 405   2          }
 406   1      
 407   1        if(same_count[more1] > same_count[2])
 408   1          {
 409   2      
 410   2          }
 411   1        else
 412   1          {
 413   2            more1 = 2;
 414   2          }
 415   1      
 416   1        if(same_count[more1] > same_count[3])
 417   1          {
 418   2      
 419   2          }
 420   1        else
 421   1          {
 422   2            more1 = 3;
 423   2          }
 424   1      
 425   1        if(same_count[more1] > same_count[4])
 426   1          {
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 8   

 427   2      
 428   2          }
 429   1        else
 430   1          {
 431   2            more1 = 4;
 432   2          }
 433   1      
 434   1        return input[more1];
 435   1      }
 436          
 437          unsigned char decode_table(unsigned char input)
 438          {
 439   1        switch(input)
 440   1          {
 441   2          case 0x81 :
 442   2            return ' ';
 443   2          case 0x82 :
 444   2            return '-';
 445   2          case 0x83 :
 446   2            return '/';
 447   2          case 0x84 :
 448   2            return '=';
 449   2          case 0x85 :
 450   2            return '>';
 451   2          case 0x86 :
 452   2            return '?';
 453   2          case 0x87 :
 454   2            return '@';
 455   2          case 0x88 :
 456   2            return 'M';
 457   2          case 0x89 :
 458   2            return 'N';
 459   2          case 0x8a :
 460   2            return 'O';
 461   2          case 0x8b :
 462   2            return ']';
 463   2          case 0x8c :
 464   2            return '^';
 465   2      
 466   2          case 0x91 :
 467   2            return '_';
 468   2          case 0x92 :
 469   2            return '`';
 470   2          case 0x93 :
 471   2            return 'm';
 472   2          case 0x94 :
 473   2            return 'n';
 474   2          case 0x95 :
 475   2            return 'o';
 476   2          case 0x96 :
 477   2            return 'p';
 478   2          case 0x97 :
 479   2            return '}';
 480   2          case 0x98 :
 481   2            return '~';
 482   2          case 0x99 :
 483   2            return 0x7f;
 484   2      
 485   2          default :
 486   2            return input;
 487   2          }
 488   1      }
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 9   

 489          
 490          unsigned char encode_table(unsigned char input)
 491          {
 492   1        switch(input)
 493   1          {
 494   2          case ' ' :
 495   2            return 0x81;
 496   2          case '-' :
 497   2            return 0x82;
 498   2          case '/' :
 499   2            return 0x83;
 500   2          case '=' :
 501   2            return 0x84;
 502   2          case '>' :
 503   2            return 0x85;
 504   2          case '?' :
 505   2            return 0x86;
 506   2          case '@' :
 507   2            return 0x87;
 508   2          case 'M' :
 509   2            return 0x88;
 510   2          case 'N' :
 511   2            return 0x89;
 512   2          case 'O' :
 513   2            return 0x8a;
 514   2          case ']' :
 515   2            return 0x8b;
 516   2          case '^' :
 517   2            return 0x8c;
 518   2      
 519   2          case '_' :
 520   2            return 0x91;
 521   2          case '`' :
 522   2            return 0x92;
 523   2          case 'm' :
 524   2            return 0x93;
 525   2          case 'n' :
 526   2            return 0x94;
 527   2          case 'o' :
 528   2            return 0x95;
 529   2          case 'p' :
 530   2            return 0x96;
 531   2          case '}' :
 532   2            return 0x97;
 533   2          case '~' :
 534   2            return 0x98;
 535   2          case 0x7f :
 536   2            return 0x99;
 537   2      
 538   2          default :
 539   2            return input;
 540   2          }
 541   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1874    ----
   CONSTANT SIZE    =     62    ----
   XDATA SIZE       =   ----       9
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      33
   IDATA SIZE       =   ----    ----
C51 COMPILER V9.54   MT8880                                                                02/28/2019 18:33:07 PAGE 10  

   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
